#!/bin/bash

# The purpose of this script is to create a new user on the system.

# TODO: add a solution for the script to require invoking with sudo privilege 
# TODO: change heredoc write files to passwd and group
# TODO: add something to append username to a group line in /etc/group

# NOTE: When should I be using functions? 

if [[ ! $EUID == 0 ]]; then
  echo "You must run this script with sudo privilege.
Try 'sudo createuser -h' for more information."
  exit 1
fi


# Function that checks if names are valid
name_check() {
# Regex found here - https://stackoverflow.com/questions/38377805/shell-script-to-check-for-string-and-special-characters 
if [[ $1 == *['!'@#\$%^\&*()+=/\ ]* || -z $1 ]]; then
  local func_result=1 
else
  local func_result=0
fi
echo "$func_result"
}

# Menu variable
helpmessage="
COMMAND STRUCTURE:
  sudo createuser [option]... [username]

OPTIONS:
  -m    Create a user home directory at /home/[username]
  -s    Specify default shell for the user.
        Example: /bin/bash
  -g    Specify additional groups to add new user to.
        Groups should be comma separated.
        Example: audio,wheel,users
  -h    Print the help menu

EXAMPLE:
  sudo createuser -m -s /bin/bash -g wheel,users my_user
"

# Check if command run without any positional parameters or options
if [[ -z $1 ]]; then
  echo "You need to specify a username or options to run this script.
Try sudo ./createuser -h to learn more."
  exit 1
fi

# Using getopts to handle script options
while getopts ":ms:g:h" opts; do
  case $opts in 
    m)
      echo "option -m"
      home_dir=true
      ;;
    s)
      echo "option -s"
      vars=$OPTARG
      ;;
    g)
      echo "option -g"
      # Check if -g argument is are valid group names by storing the result of name_check() in the variable group_check and then testing whether 0 or 1
      group_check="$(name_check $OPTARG)"
      if [[ $group_check == 0 ]]; then
        # Storing the provided argument for -g, replacing commas with empty spaces with the power of variable expansion!
        # NOTE: I got this from the useradd docs do I need to cite it? 
        varg=(${OPTARG/,/ })
      else
        echo "Invalid group names or syntax
Try 'sudo ./createuser -h' for more information"        
      fi
      ;;
    h)
      echo "$helpmessage"
      ;;
    :)
      echo "-$OPTARG requires an argument"
      exit 1
      ;;
    *)
      echo "error"
      exit 1
      ;;
  esac
done

# Get rid of all getopts options and arguments to allow the use of positional parameters
shift $(($OPTIND -1))

# Check if positional parameter is a valid username
checked_name="$(name_check $1)"
if [[ ! $checked_name == 0 ]]; then
  echo "Missing or invalid username. Make sure there are no special characters in your username."
  exit 1
fi

# Set first positional parameter as username
username=$1
# Create home directory full path
# homedir="/home/$username"
# echo $homedir

# If shell was specified, use that shell, otherwise use the default /usr/bin/bash
if [[ -z $vars ]]; then
  shell="/usr/bin/bash"
else
  shell=$vars
fi

# Make home directory for the user and copy /etc/skel to it
# mkdir /home/$1
# cp -r /etc/skel/* /home/$1 

# NOTE: tail -n 1 /etc/passwd | awk -F: '{ print $3/$4}' <-- will get uid/gid from /etc/passwd

# taking values from id_arr() and incrementing and storing in new variables
# This line takes the last line of /etc/passwd and obtains just the UID and GID of that line
# This uses awk to get the 3rd and 4th inputs from a line in /etc/passwd and increments by 1
# NOTE: tail -n 1 ~/test_file | awk -F: '{print ++$3}'
# TODO: explain how awk works
# https://man7.org/linux/man-pages/man1/awk.1p.html
uid=$(tail -n 1 /etc/passwd | awk -F':' '{print ++$3}')
gid=$(tail -n 1 /etc/passwd | awk -F':' '{print ++$4}')
echo $uid
echo $gid

# This string combines all user/group related variables into a valid /etc/passwd entry
echo $username $uid $gid $homedir $shell
# passwd_entry=$(printf '%s:x:%s:%s::%s:%s' "$username" "$uid" "$gid" "$homedir" "$shell")

# Append user information into the /etc/passwd file
cat >> /home/arch/test_file <<- EOF
$username:x:$uid:$gid::$homedir:$shell
EOF
# echo "$password_entry"

# Append user primary group into /etc/group file~
cat >> /home/arch/test_file <<- EOF
$username:x:$gid:
EOF
# NOTE: try awk '{print $0}' to append to line in /etc/group 

# Run the copy_skel function if $home_dir == true that was set in the -m case
# if [[ $home_dir == true ]]; then
#   mkdir /home/$1
#   copy_skel $1 && echo "/etc/skel copied into /home/$1."
# fi
