#!/bin/bash

# The purpose of this script is to create a new user on the system.

# Checking if the environment variable EUID is not equal to 0, which is the root user's user ID (UID). If true, tell the user to use sudo
# EUID stands for Effective User ID, it is essentially the user ID that will execute a process
# When you run a command normally, the EUID will be equal to the UID of the user that executes the command
# When you run a command with sudo, the EUID changes to 0 which means the process will be executed by the root user
# https://askubuntu.com/questions/1279395/give-root-permissions-to-new-user
if [[ ! $EUID == 0 ]]; then
  echo "ERROR: You must run this script with sudo privilege.
Try 'sudo ./createuser -h' for more information."
  exit 1
fi

# Function that checks if names are valid
name_check() {
# Check positional parameter $1 (should be username of the new user being made) if it contains any special characters or if length is 0 (doesn't exist)
# Regex found here - https://stackoverflow.com/questions/26621736/how-to-check-if-a-string-contains-a-special-character
if [[ $1 == *['!'@#\$%^\&*(.)+=/\ ]* || -z $1 ]]; then
  local func_result=1 
else
  local func_result=0
fi
# Echoing so I can store 0 or 1 in a variable as a way to return 0 or 1 for this function
echo "$func_result"
}

# Help menu variable
helpmessage="
COMMAND STRUCTURE:
  sudo ./createuser [option(s)]... [username]

OPTIONS:
  -m    Create a user home directory at /home/[username]
  -s    Specify default shell for the user.
        Example: /bin/bash
  -g    Specify additional groups to add new user to.
        Groups should be comma separated.
        Example: audio,wheel,users
  -h    Print the help menu

EXAMPLE:
  sudo ./createuser my_user
  sudo ./createuser -m -s /bin/bash -g wheel,users my_user
"

# Check if command run without any positional parameters or options by checking length of the first positional parameter
if [[ -z $1 ]]; then
  echo "ERROR: You need to specify a username or options to run this script.
Try 'sudo ./createuser -h' for more information."
  exit 1
fi

# Using getopts to handle script options
while getopts ":ms:g:h" opts; do
  case $opts in 
    m)
      # -m option is used if the user wants the new user to have a home directory created
      # Initializing this variable to use later to check if this variable is true - if true, create a home directory for the new user
      make_home_dir=true
      ;;
    s)
      # -s option lets the user specify their own default shell for the new user
      # Storing the argument to -s option in a variable which is later used to set the default shell for the user
      vars=$OPTARG
      # Check if the shell is installed on the system
      if [[ ! -e $vars ]]; then
        echo "ERROR: Shell entered does not exist."
        exit 1
      fi
      ;;
    g)
      # -g option let's the user add the new user to one or more existing groups
      # More than one group should have groups separated by commas such as "wheel,user,audio" - this is specified in the help
      # Check if -g argument are valid group names by storing the result of name_check() in the variable group_check - this is the bash way to return a result from a function.
      group_check="$(name_check $OPTARG)"
      # Checking if result returned from name_check is equal to 0
      if [[ $group_check == 0 ]]; then
        # Storing the provided argument for -g in a indexed array, replacing commas with empty spaces with the power of variable expansion!
        # I found this solution to have the user specify multiple groups by separating them with commas in the useradd man page
        # Replacement characters in a string were found on the bash cheatsheet
        # https://devhints.io/bash
        varg=(${OPTARG//,/ })

        # Loop through each group given to the -g option and check whether it exists in the /etc/group file
        for group in ${varg[@]}; do
          # I make use of the regex '^' to specify that the grep pattern should start at the beginning of the line.
          # I did this incase there were multiple groups with the matching patterns
          # For example, if I was just looking for the 'school' group, groups 'bcit_school' and 'school' would have both matched without the '^'
          if [[ -z $(grep "^$group:" /etc/group) ]]; then
            echo "$group group does not exist on this system."
            exit 1
          fi
        done

      else
        echo "ERROR: Invalid group names or syntax
Try 'sudo ./createuser -h' for more information."
        exit 1
      fi
      ;;
    h)
      echo "$helpmessage"
      ;;
    :)
      # This error is for if the user used an option that requires an argument without passing an argument
      echo "ERROR: -$OPTARG requires an argument
Try 'sudo ./createuser -h' for more information."
      exit 1
      ;;
    *)
      # This error is for if the user used an option that doesn't exist
      echo "ERROR: -$OPTARG is not a valid option.
Try 'sudo ./createuser -h' for more information."
      exit 1
      ;;
  esac
done

# Get rid of all getopts options and arguments to allow the use of positional parameters 
# OPTIND is a variable used by getopts that represents the next element to be processed in a command's positional parameters.
# Starting at 1, every time an option or argument is processed, OPTIND is updated to be the next positional parameter's index.
# So, essentially this line is shifting the count of all options and arguments, minus 1, to account for the positional paramater we want to use - in this case, the username of our new user
# Shifting is moving positional parameters n times to the left
# https://stackoverflow.com/questions/66764069/what-does-optind-do
# https://linux.die.net/man/3/optind
shift $(($OPTIND -1))

# Check if positional parameter is a valid username
checked_name="$(name_check $1)"
if [[ ! $checked_name == 0 ]]; then
  echo "Missing or invalid username. Make sure there are no special characters in your username."
  exit 1
fi

# Check if username already exists in the system
if [[ -z $(grep "^$1:" /etc/passwd) ]]; then
  # Set first positional parameter as username
  username=$1
else
  echo "That username already exists. Choose a different username."
  exit 1
fi
# Create home directory full path
home_dir="/home/$username"

# If shell was specified, use that shell, otherwise use the default /usr/bin/bash
# $vars is the shell path that was given as an argument to the -s getopts option
if [[ -z $vars ]]; then
  # Initializing shell variable which will be used later to add a user entry into /etc/passwd
  shell="/usr/bin/bash"
else
  shell=$vars
fi

# These next two lines use a combination of tail, awk, and sort to extract the highest UID and group ID (GID) from the /etc/passwd and /etc/group files
# tail by default outputs the last 10 lines of a file - using the -n option let's us specify how many lines from the bottom of the file to output
# awk is a tool that reads and manipulates plain text files - it separates lines of the file into "records" and each record is separated into "fields"
# In this case, each record is an entry in the /etc/passwd or /etc/group file (a user/group in the system) and each field is the information about that user/group
# The -F':' option in the awk command tells awk to separate fields by the colon symbol which is perfect for lines in /etc/passwd
# We can extract information from each field by using the variables $1, $2, $3 ... - $1 being the first field, $2 second, and so on
# awk can also perform operations on the text that it extracts such as ++ and -- which increment or decrement a number
# awk can also utilize control statements such as if-else statements - I check whether the UID/GID is less than 65534 (nobody ID)
# sort is a command that sorts lines of a file or output - the -n option specifies a numeric sort
# To sum it up, these next two lines read and output the 3rd field (the uid and gid fields) from each record in the /etc/passwd and /etc/group files as long as the 3rd field is less than 65534 - the nobody user/group
# That output is then sorted in ascending order and then piped into tail which outputs only the last line - the highest ID number
# https://man7.org/linux/man-pages/man1/tail.1.html
# https://man7.org/linux/man-pages/man1/awk.1p.html
# https://www.geeksforgeeks.org/awk-command-unixlinux-examples/
# https://stackoverflow.com/questions/4065676/in-unix-user-having-the-highest-uid
uid=$(awk -F':' '{if ($3 < 65534) print ++$3}' /etc/passwd | sort -n | tail -n 1)
gid=$(awk -F':' '{if ($3 < 65534) print ++$3}' /etc/group | sort -n | tail -n 1)

# Append user information into the /etc/passwd file using heredocs
# heredocs feed a set of commands or lines of text into a program or command
# In this case, the command is 'cat >> /etc/passwd' which just reads and appends into the file /etc/passwd
# The list of commands or lines of text are within the two delimiters, in this case 'EOF'
# The '<<-' is what is telling this whole thing to feed the text/commands between the delimiters into the 'cat >> /etc/passwd' command
# The '-' in '<<-' is an option that will not read leading tabs inside the delimiters
# https://tldp.org/LDP/abs/html/here-docs.html
cat >> /etc/passwd <<- EOF
$username:x:$uid:$gid::$home_dir:$shell
EOF

# Append user primary group into /etc/group file using heredocs 
cat >> /etc/group <<- EOF
$username:x:$gid:
EOF

# Make the home directory if $make_home_dir variable == true - would be the case if the -m option was used
if [[ $make_home_dir == true ]]; then
  mkdir $home_dir 
  # Copy command using -r option which tells cp to copy recursively through the directories
  cp -r /etc/skel/* $home_dir
  # Change owner and permissions of the new home directory
  # the -R option tells the command to apply changes recursively
  # https://tldp.org/LDP/sag/html/adduser.html
  chown -R $username:$username $home_dir
  chmod -R 700 $home_dir
fi

# Loop through list of groups passed into the -g option and add the new user to those groups
for group in ${varg[@]}; do
  # This line uses command substitution to store the line in /etc/groups that matches one of the groups specified in -g
  group_line=$(grep "^$group:" /etc/group)
  # Checking if there are any users already part of this group
  # This is necessary to correctly format the way users are added to the group with commas
  # This is done by passing the output of the $group_line variable into awk and separating it into fields and extracting the 4th field which is where users that belong to the group are written
  # If the length of that is 0, then append the new user without a comma in front
  # https://stackoverflow.com/questions/11245144/replace-whole-line-containing-a-string-using-sed
  if [[ -z $(echo $group_line | awk -F: '{print $4}') ]]; then
    # sed is a tool that can edit text from a file or output
    # Using it here to replace matched patterns with the matched pattern + the new user username
    # The -i option tells sed to edit the file in-place
    # The structure is 'sed -i "/to be replaced/c string to be placed" file'
    # The 'c' after the second forward slash is a sed command that means to replace the selected line with text
    # https://linux.die.net/man/1/sed
    sed -i "/$group_line/c ${group_line}$username" /etc/group
  else
  # Otherwise, append the new user with a comma in front 
    sed -i "/$group_line/c ${group_line},$username" /etc/group
  fi
done

# Create a password for the new user
passwd $username
